<!--
 Build XML file for ProcessEditor Workbench and Server.
 (c) 2014 Frank Puhlmann.
-->
<project name="processeditor" basedir="." default="clean-build-run-workbench" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="src.dir" value="src"/>
    <property name="pics.dir" value="pics"/>
    <property name="www.dir" value="www"/>
    <property name="resources.dir" value="resources"/>

    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jar"/>

    <property name="main-class-workbench" value="com.inubit.research.gui.Workbench"/>
    <property name="main-class-server" value="com.inubit.research.server.ProcessEditorServer"/>

    <property name="lib.dir" value="lib"/>

    <property name="test.dir" value="test/net/frapu/code/visualization/pcm"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <fileset id="pics" dir="${pics.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
    </fileset>

    <fileset id="www" dir="${www.dir}">
        <include name="**/*.js"/>
        <include name="**/*.css"/>
        <include name="**/*.html"/>
    </fileset>

    <fileset id="resources" dir="${resources.dir}">
        <include name="**/*.xml"/>
    </fileset>

    <!-- Properties necessary for ivy installation-->
    <property name="ivy.install.version" value="2.1.0-rc2" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <!-- add targets for ivy -->
    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>
	
	<target name="clean-w-deps">
        <delete dir="${build.dir}"/>
	    <delete>
             <fileset dir="${lib.dir}" includes="*.jar"/>
        </delete>
    </target>

    <target name="compile" depends="deps">
        <mkdir dir="${classes.dir}"/>
        <javac source="1.7" target="1.7" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
    </target>
	
	<target name="compile-wo-deps">
        <mkdir dir="${classes.dir}"/>
        <javac source="1.7" target="1.7" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
    </target>

    <target name="jar-workbench" depends="compile-wo-deps">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
			<archives>
				<zips>
					<fileset dir="${lib.dir}" includes="**/*.jar"/>
				</zips>
			</archives>
            <fileset refid="pics"/>
            <fileset refid="resources"/>
            <manifest>
                <attribute name="Main-Class" value="${main-class-workbench}"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-server" depends="compile-wo-deps">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <fileset refid="pics"/>
            <fileset refid="www"/>
            <fileset refid="resources"/>
            <manifest>
                <attribute name="Main-Class" value="${main-class-server}"/>
            </manifest>
        </jar>
    </target>

    <target name="run-workbench.jar" depends="jar-workbench">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true">
            <classpath>
                <path refid="classpath"/>
                <path location="${jar.dir}/${ant.project.name}.jar"/>
            </classpath>
        </java>
    </target>

    <!--
    Runs the server from the compiled jar.
    -->
    <target name="run-server.jar" depends="jar-server">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true">
            <classpath>
                <path refid="classpath"/>
                <path location="${jar.dir}/${ant.project.name}.jar"/>
            </classpath>
        </java>
    </target>

    <target name="clean-build-workbench" depends="clean,jar-workbench"/>

    <target name="clean-build-run-workbench" depends="clean,run-workbench.jar"/>

    <target name="clean-build-server" depends="clean,jar-server"/>

    <target name="clean-build-run-server" depends="clean,run-server.jar"/>

    <target name="deps" description="--> retrieve dependencies with ivy">
        <ivy:retrieve />
    </target>

    <target name="compileTests" depends="compile">
        <javac source="1.7" target="1.7" srcdir="${test.dir}" destdir="${classes.dir}">
		<classpath>
			<path refid="classpath"/>
			<pathelement location="${classes.dir}"/>
		</classpath>
	</javac>
    </target>

    <target name="test" depends="compileTests">
        <junit showoutput="true" printsummary="yes" haltonfailure="yes" haltonerror="true">
       	    <classpath>
		<path refid="classpath"/>
		<pathelement location="${classes.dir}"/>
	    </classpath>
	    <formatter type="plain" usefile="false"/>
	    <test name="net.frapu.code.visualization.pcm.PCMScenarioTest"/>
        </junit>
    </target>

</project>