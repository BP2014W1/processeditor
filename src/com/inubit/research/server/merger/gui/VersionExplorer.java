/**
 *
 * Process Editor
 *
 * (C) 2009, 2010 inubit AG
 * (C) 2014 the authors
 *
 */
package com.inubit.research.server.merger.gui;

import com.inubit.research.client.InvalidUserCredentialsException;
import com.inubit.research.client.XMLHttpRequestException;
import com.inubit.research.server.merger.ClientFascade;
import com.inubit.research.server.merger.VersionTreeViewer.VersionTreeViewer;
import com.inubit.research.server.merger.animator.MarkingRemover;
import com.inubit.research.server.merger.animator.MarkingSetter;
import com.inubit.research.server.merger.animator.ModelCommitter;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.io.File;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import net.frapu.code.converter.ProcessEditorImporter;
import net.frapu.code.visualization.ProcessModel;

/**
 *
 * @author Uwe
 */
public class VersionExplorer extends javax.swing.JFrame {
    
    
    
    private final ConflictResolverEditor editor;
    private VersionTreeManager manager;
    public boolean canceled = true;

    /** Creates new form VersionExplorer */
    public VersionExplorer() {
        initComponents();
        // set window size
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        double f = 0.8;
        this.setBounds((int) ((1 - f) / 2 * screen.width), (int) ((1 - f) / 2 * screen.height), (int) (f * screen.width), (int) (f * screen.height));
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        //merger displayed in the beginning


        //init listener for change
        editor = new ConflictResolverEditor(manager);


        //init editor
        editorPanel.setLayout(new GridLayout(1, 1));
        editorPanel.add(editor);        
    }
    
    public VersionExplorer(ClientFascade mergeProcess) throws XMLHttpRequestException, MalformedURLException, InvalidUserCredentialsException {
        this();        
        //Version Tree
        VersionTreeViewer versionTree = new VersionTreeViewer(mergeProcess.loadModelDescription());
        VersionTreePanel.setLayout(new GridLayout(1, 1));
        VersionTreePanel.add(versionTree);
        manager = new VersionTreeManager(versionTree, editor, changeLog, mergeProcess, this.jLabel1, this.okButton);
        editor.setManager(manager);
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPanel = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        changeLog = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        VersionTreePanel = new javax.swing.JPanel();
        UnmarkToggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        okButton.setText("Commit");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        editorPanel.setAutoscrolls(true);

        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);
        editorPanel.setLayout(editorPanelLayout);
        editorPanelLayout.setHorizontalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1531, Short.MAX_VALUE)
        );
        editorPanelLayout.setVerticalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(editorPanel);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Animate");
        jCheckBox1.setToolTipText("");
        jCheckBox1.setName("Animate?"); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Comparing Version X to Y");

        changeLog.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        changeLog.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(changeLog);

        VersionTreePanel.setBackground(new java.awt.Color(255, 51, 51));
        VersionTreePanel.setAutoscrolls(true);

        javax.swing.GroupLayout VersionTreePanelLayout = new javax.swing.GroupLayout(VersionTreePanel);
        VersionTreePanel.setLayout(VersionTreePanelLayout);
        VersionTreePanelLayout.setHorizontalGroup(
            VersionTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 863, Short.MAX_VALUE)
        );
        VersionTreePanelLayout.setVerticalGroup(
            VersionTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(VersionTreePanel);

        UnmarkToggleButton.setText("Unmark");
        UnmarkToggleButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                UnmarkToggleButtonStateChanged(evt);
            }
        });
        UnmarkToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnmarkToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UnmarkToggleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1194, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(okButton)
                            .addComponent(UnmarkToggleButton)
                            .addComponent(cancelButton)
                            .addComponent(jCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.canceled = false;
        editor.getMergeAnimator().getAnimationQueue().queue(new MarkingRemover(editor));
        editor.getMergeAnimator().getAnimationQueue().queue(new ModelCommitter(editor, manager.serverConnection, this));
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        
        dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        manager.setAnimate(jCheckBox1.isSelected());
}//GEN-LAST:event_jCheckBox1ActionPerformed

    private void UnmarkToggleButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_UnmarkToggleButtonStateChanged
        
}//GEN-LAST:event_UnmarkToggleButtonStateChanged

    private void UnmarkToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnmarkToggleButtonActionPerformed
        if (!UnmarkToggleButton.isSelected()) {
            editor.getMergeAnimator().getAnimationQueue().queue(new MarkingSetter(editor));
        } else {
            editor.getMergeAnimator().getAnimationQueue().queue(new MarkingRemover(editor));
        }
}//GEN-LAST:event_UnmarkToggleButtonActionPerformed

    private ProcessModel loadModel() {
        JFileChooser model1JFC = new JFileChooser();
        int option = model1JFC.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File model1InputFile = model1JFC.getSelectedFile();
            try {
                return (new ProcessEditorImporter().parseSource(model1InputFile)).get(0);
            } catch (Exception ex) {
                Logger.getLogger(VersionExplorer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {

        }
        throw new Error();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() { 
                VersionExplorer versionExplorer = new VersionExplorer();
                versionExplorer.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });               
                versionExplorer.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton UnmarkToggleButton;
    private javax.swing.JPanel VersionTreePanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList changeLog;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
