/**
 *
 * Process Editor - inubit Workbench Package
 *
 * (C) 2009, 2010 inubit AG
 * (C) 2014 the authors
 * 
 */
package com.inubit.research.gui;

import com.inubit.research.client.ModelServer;
import com.inubit.research.client.UserCredentials;
import com.inubit.research.server.merger.AnswerFromPublishModelDialog;
import java.awt.Color;
import java.net.URI;
import java.net.URISyntaxException;
import net.frapu.code.visualization.Configuration;

/**
 *
 * @author fpu
 */
public class WorkbenchPublishModelDialog extends javax.swing.JDialog {

    /**
     *
     */
    private static final long serialVersionUID = -6907856781482598692L;
    public static final int STATUS_PUBLISH = 0;
    public static final int STATUS_CANCEL = 1;
    public int status = STATUS_CANCEL;
    AnswerFromPublishModelDialog answer;

    /** Creates new form WorkbenchPublishModelDialog */
    public WorkbenchPublishModelDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Configuration conf = Configuration.getInstance();
        serverTextField.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_URI, "http://localhost:1205"));
        userTextField.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_USER,"root"));
        passwordTextField.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_PASSWORD, "inubit"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        newModelOption = new javax.swing.JRadioButton();
        newVersionOption = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentTextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        titleTextField = new javax.swing.JTextField();
        forceCommitCheckbox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        publishButton = new javax.swing.JButton();
        serverTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        folderTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Publish Model to Server");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonGroup1.add(newModelOption);
        newModelOption.setText("Publish as new model");
        newModelOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newModelOptionActionPerformed(evt);
            }
        });

        buttonGroup1.add(newVersionOption);
        newVersionOption.setSelected(true);
        newVersionOption.setText("Publish as new version");
        newVersionOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newVersionOptionActionPerformed(evt);
            }
        });

        jLabel1.setText("Comment:");

        commentTextArea.setColumns(20);
        commentTextArea.setLineWrap(true);
        commentTextArea.setRows(5);
        jScrollPane1.setViewportView(commentTextArea);

        jLabel2.setText("Title:");

        titleTextField.setText("jTextField1");
        titleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextFieldActionPerformed(evt);
            }
        });

        forceCommitCheckbox.setText("Force commit (don't merge changes)");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        publishButton.setText("Publish");
        publishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishButtonActionPerformed(evt);
            }
        });

        serverTextField.setText("jTextField1");
        serverTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Server: ");

        jLabel4.setText("Folder:");

        folderTextField.setText("/");

        jLabel5.setText("User:");

        userTextField.setText("fpu");

        jLabel6.setText("Password:");

        passwordTextField.setText("inubit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(newModelOption)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(forceCommitCheckbox))
                    .addComponent(newVersionOption)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(publishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                            .addComponent(titleTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(29, 29, 29)
                        .addComponent(folderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(userTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(folderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(newModelOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(8, 8, 8)
                .addComponent(newVersionOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forceCommitCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(publishButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param evt
     */
    private void newModelOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newModelOptionActionPerformed
        updateSelection(true);
    }//GEN-LAST:event_newModelOptionActionPerformed

    /**
     * @param evt
     */
    private void newVersionOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newVersionOptionActionPerformed
        updateSelection(false);
    }//GEN-LAST:event_newVersionOptionActionPerformed

    /**
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        answer = new AnswerFromPublishModelDialog(status == STATUS_PUBLISH,
                isPublishAsNewModel(), isForceCommit(), getServer(), getComment(),
                getFolder(), getTitleText());
        this.dispose();
        status = STATUS_CANCEL;
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        answer = new AnswerFromPublishModelDialog(status == STATUS_PUBLISH,
                isPublishAsNewModel(), isForceCommit(), getServer(), getComment(),
                getFolder(), getTitleText());
        this.dispose();
        status = STATUS_CANCEL;
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param evt
     */
    private void publishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishButtonActionPerformed
        // Check title
        if (titleTextField.getText().isEmpty()) {
            titleTextField.setBackground(Color.RED);
        } else {
            titleTextField.setBackground(Color.WHITE);
        }
        // Check server status
        if (isPublishAsNewModel()) {
            // Try to connect to server
            try {
              ModelServer server = new ModelServer(URI.create(serverTextField.getText()), "/");
            } catch (Exception ex) {
                serverTextField.setBackground(Color.red);
                return;
            }
        }
        status = STATUS_PUBLISH;
        answer = new AnswerFromPublishModelDialog(status == STATUS_PUBLISH,
                isPublishAsNewModel(), isForceCommit(), getServer(), getComment(),
                getFolder(), getTitleText());

        this.dispose();

    }//GEN-LAST:event_publishButtonActionPerformed

    private void titleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTextFieldActionPerformed

    private void serverTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverTextFieldActionPerformed

    public void setPublishAsNewModel(boolean b) {
        if (b) {
            newVersionOption.setEnabled(false);
        }
        updateSelection(b);
    }

    private void updateSelection(boolean b) {
          if (b) {
            newModelOption.setSelected(true);
            forceCommitCheckbox.setEnabled(false);
            serverTextField.setEnabled(true);
            userTextField.setEnabled(true);
            passwordTextField.setEnabled(true);
        } else {
            newVersionOption.setSelected(true);
            forceCommitCheckbox.setEnabled(true);
            serverTextField.setEnabled(false);
            userTextField.setEnabled(false);
            passwordTextField.setEnabled(false);
        }
    }

    public UserCredentials getCredentials() throws URISyntaxException {
        return new UserCredentials(new URI(getServer()), userTextField.getText(), new String(passwordTextField.getPassword()));
    }

    public String getServer() {
        return serverTextField.getText();
    }

    public void setTitleText(String title) {
        titleTextField.setText(title);
    }

    public String getTitleText() {
        return titleTextField.getText();
    }

    public void setComment(String comment) {
        commentTextArea.setText(comment);
    }

    public String getComment() {
        return commentTextArea.getText();
    }

    public void setFolder(String path) {
        if (path == null) {
            path = "/";
        }
        folderTextField.setText(path);
    }

    public void setUserName(String user) {
        userTextField.setText(user);
    }

    public void setPassword(String password) {
        passwordTextField.setText(password);
    }

    public String getFolder() {
        // Check if folder needs to be extended by user name
        String userName = userTextField.getText();
        String folder = folderTextField.getText();

        if (!userName.equals("root")) {
            // Folder needs to be extended by "/home/"
            if (!folder.startsWith("/home/")) folder = "/home/"+userName+folder;
        }
        return folder;
    }

    public boolean isPublishAsNewModel() {
        return newModelOption.isSelected();
    }

    public boolean isForceCommit() {
        return forceCommitCheckbox.isSelected();
    }

    public int getStatus() {
        return status;
    }

    public AnswerFromPublishModelDialog getAnswer() {
        return answer;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                WorkbenchPublishModelDialog dialog = new WorkbenchPublishModelDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea commentTextArea;
    private javax.swing.JTextField folderTextField;
    private javax.swing.JCheckBox forceCommitCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton newModelOption;
    private javax.swing.JRadioButton newVersionOption;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton publishButton;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables
}
