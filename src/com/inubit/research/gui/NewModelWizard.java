/**
 *
 * Process Editor - inubit Workbench Package
 *
 * (C) 2009, 2010 inubit AG
 * (C) 2014 the authors
 * 
 */
package com.inubit.research.gui;

import java.awt.Color;
import java.awt.Component;
import java.util.LinkedList;
import java.util.List;

import javax.swing.AbstractListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import net.frapu.code.visualization.ProcessModel;
import net.frapu.code.visualization.ProcessModelPreview;
import net.frapu.code.visualization.ProcessUtils;

/**
 *
 * @author fpu
 */
public class NewModelWizard extends javax.swing.JDialog {

   /**
	 * 
	 */
	private static final long serialVersionUID = 2761239503320373099L;
    @SuppressWarnings("unused")
	private Workbench workbench;
    private ProcessModel result = null;

    /** Creates new form NewModelWizard */
    public NewModelWizard(java.awt.Frame parent, boolean modal, Workbench wb) {
        super(parent, modal);
        workbench = wb;
        initComponents();
        initCustomComponents();
    }

    public void initCustomComponents() {

        final List<ListItem> sampleModels = new LinkedList<ListItem>();

        for (Class<? extends ProcessModel> c : WorkbenchHelper.getSupportedProcessModels()) {
            try {
                // Try to instantiate class
                Object o = c.newInstance();
                // Check if ProcessModel
                if (o instanceof ProcessModel) {
                    // Cast to ProcessModel
                    ProcessModel m = (ProcessModel) o;
                    // Add to list
                    sampleModels.add(new ListItem(m.getDescription(), m));
                }
            } catch (Exception ex) {
            }
        }
        ListModel types = new AbstractListModel() {

            /**
			 * 
			 */
			private static final long serialVersionUID = 60269788144204370L;

			@Override
            public int getSize() {
                return sampleModels.size();
            }

            @Override
            public Object getElementAt(int index) {
                return sampleModels.get(index);
            }
        };
        modelTypeList.setModel(types);
        modelTypeList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Create templates for selected type
                final List<ListItem> templateModels = new LinkedList<ListItem>();
                // Add empty model
                ProcessModel source = (ProcessModel)((ListItem)modelTypeList.getSelectedValue()).getObject();
                for (ProcessModel model: ProcessUtils.getTemplates(source)) {
                    String comment = model.getProperty(ProcessModel.PROP_COMMENT);
                    templateModels.add(new ListItem(comment.isEmpty()?"Default":comment,model));
                }

                ListModel templates = new AbstractListModel() {

                    /**
					 * 
					 */
					private static final long serialVersionUID = -3702156341419899760L;

					@Override
                    public int getSize() {
                       return templateModels.size();
                    }

                    @Override
                    public Object getElementAt(int index) {
                        return templateModels.get(index);
                    }
                };

                templateList.setModel(templates);
                templateList.setCellRenderer(new MyCellRenderer());
                templateList.setSelectedIndex(0);
            }
        });

        modelTypeList.setSelectedIndex(0);
    }

    public ProcessModel getResult() {
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        modelTypeList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        templateList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create new model...");
        setResizable(false);

        jLabel1.setText("Select model type:");

        jLabel2.setText("Select template:");

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        modelTypeList.setModel(new javax.swing.AbstractListModel() {
            /**
			 * 
			 */
			private static final long serialVersionUID = -6310805986392625682L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        modelTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(modelTypeList);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(50, 50));

        templateList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(templateList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(286, 286, 286))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addComponent(jSeparator1)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    /**
	 * @param evt  
	 */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
	 * @param evt  
	 */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        result = (ProcessModel) ((ListItem) templateList.getSelectedValue()).getObject();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList modelTypeList;
    private javax.swing.JList templateList;
    // End of variables declaration//GEN-END:variables

    public class ListItem {

        private String label;
        private Object object;

        public ListItem(String label, Object object) {
            this.label = label;
            this.object = object;
        }

        public String getLabel() {
            return label;
        }

        public Object getObject() {
            return object;
        }

        @Override
        public String toString() {
            return label;
        }
    }

    class MyCellRenderer extends JLabel implements ListCellRenderer {

        /**
		 * 
		 */
		private static final long serialVersionUID = -3380323620843504906L;

		public MyCellRenderer() {
            setOpaque(true);
            setIconTextGap(5);
            setVerticalAlignment(JLabel.NORTH);
        }

        // Set the attributes of the
        //class and return a reference
        public Component getListCellRendererComponent(JList list,
                Object value, // value to display
                int index, // cell index
                boolean iss, // is selected
                boolean chf) // cell has focus?
        {

            if (iss) {
                setBackground(new Color(240,240,240));
            } else {
                setBackground(Color.WHITE);
            }

            // Set the text
            this.setText(value.toString());

            // Set the preview
            this.setIcon(new ImageIcon(
                    ProcessModelPreview.createStyledPreview((ProcessModel)((ListItem)value).getObject(), 75)
                    ));

            return this;
        }
    }
}
