/**
 *
 * Process Editor - inubit Workbench Package
 *
 * (C) 2009, 2010 inubit AG
 * (C) 2014 the authors
 * 
 */
package com.inubit.research.gui;

import com.inubit.research.client.InvalidUserCredentialsException;
import com.inubit.research.client.ModelDescription;
import com.inubit.research.client.ModelDirectory;
import com.inubit.research.client.ModelDirectoryEntry;
import com.inubit.research.client.ModelServer;
import com.inubit.research.client.ModelVersionDescription;
import com.inubit.research.client.UserCredentials;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreeSelectionModel;
import net.frapu.code.visualization.Configuration;
import net.frapu.code.visualization.ProcessModel;

/**
 *
 * @author fpu
 */
public class WorkbenchFetchModelDialog extends javax.swing.JDialog {

    /**
     *
     */
    private static final long serialVersionUID = -1912449434260623134L;
    private ModelVersionDescription currentModelVersion = null;
    private boolean onlyHeadVersions = false;

    /** Creates new form WorkbenchFetchModelDialog */
    public WorkbenchFetchModelDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        resetModelList();
        resetVersions();
        // Set single selection for tree
        TreeSelectionModel selModel = new DefaultTreeSelectionModel();
        selModel.setSelectionMode(DefaultTreeSelectionModel.SINGLE_TREE_SELECTION);
        modelTree.setSelectionModel(selModel);
        // Set default server ip
        Configuration conf = Configuration.getInstance();
        serverUriTextField.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_URI, "http://localhost:1205"));
        userName.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_USER,"root"));
        userPassword.setText(conf.getProperty(WorkbenchConnectToServerDialog.CONF_SERVER_PASSWORD,"inubit"));
        connectToServerAction();
    }

    public boolean isOnlyHeadVersions() {
        return onlyHeadVersions;
    }

    public void setOnlyHeadVersions(boolean onlyHeadVersions) {
        this.onlyHeadVersions = onlyHeadVersions;
    }

    private void connectToServerAction() {
        // Try to fetch list of models from server
        serverUriTextField.setBackground(Color.WHITE);
        userName.setBackground(Color.WHITE);
        userPassword.setBackground(Color.WHITE);
        try {
            URI serverUri = URI.create(serverUriTextField.getText());
            ModelServer server = new ModelServer(serverUri, "/",
                    new UserCredentials(serverUri, userName.getText(), new String(userPassword.getPassword())));

            ModelDirectory directory = server.getDirectory();
            updateModelList(directory);
            Configuration conf = Configuration.getInstance();
            conf.setProperty(WorkbenchConnectToServerDialog.CONF_SERVER_URI, serverUriTextField.getText());
            conf.setProperty(WorkbenchConnectToServerDialog.CONF_SERVER_USER, userName.getText());
            conf.setProperty(WorkbenchConnectToServerDialog.CONF_SERVER_PASSWORD, new String(userPassword.getPassword()));
        } catch (Exception e) {
            if (e instanceof InvalidUserCredentialsException) {
                userName.setBackground(Color.RED);
                userPassword.setBackground(Color.red);
            } else {
                serverUriTextField.setBackground(Color.RED);
            }
            resetModelList();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        serverUriTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        modelTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        fetchButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        previewLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        versionsComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        commentTextArea = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        userPassword = new javax.swing.JPasswordField();
        userName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fetch Model from Server");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Server:");

        serverUriTextField.setText("http://192.168.0.134:1205");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        modelTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(modelTree);

        jLabel2.setText("Models:");

        fetchButton.setText("Fetch");
        fetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Preview:");

        previewLabel.setBackground(new java.awt.Color(255, 255, 255));
        previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewLabel.setText("No Preview available");
        previewLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        previewLabel.setOpaque(true);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Version:");

        versionsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Head" }));

        jLabel5.setText("Comment:");

        commentTextArea.setColumns(20);
        commentTextArea.setEditable(false);
        commentTextArea.setFont(new java.awt.Font("Tahoma", 0, 11));
        commentTextArea.setLineWrap(true);
        commentTextArea.setRows(5);
        jScrollPane2.setViewportView(commentTextArea);

        jLabel6.setText("User:");

        jLabel7.setText("Password:");

        userPassword.setText("inubit");

        userName.setText("fpu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fetchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(previewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                    .addComponent(versionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(userName, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(serverUriTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(serverUriTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectButton))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(userPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(previewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(versionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(jLabel5)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton)
                            .addComponent(fetchButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        connectToServerAction();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        currentModelVersion = null;
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void fetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_fetchButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        currentModelVersion = null;
    }//GEN-LAST:event_formWindowClosing

    public UserCredentials getCredentials() {
        return new UserCredentials(
                URI.create(serverUriTextField.getText()),
                userName.getText(),
                new String(userPassword.getPassword())
                );
    }

    public URI getSelectedProcessModelUri() {
        if (currentModelVersion == null) {
            return null;
        }
        URI result = currentModelVersion.getModelUri();
        // Check if head version required
        if (isOnlyHeadVersions()) {
            try {
            result = new URI(result.toASCIIString().substring(0, result.toASCIIString().indexOf("/versions")));
            } catch (URISyntaxException ex) {};
        }

        return result;
    }

    public ProcessModel getSelectedProcessModel() {
        if (currentModelVersion == null) {
            return null;
        }
        try {
            ProcessModel model = currentModelVersion.getProcessModel();
            model.setProperty(ProcessModel.PROP_FOLDERALIAS, currentModelVersion.getParentModelDescription().getFolder());
            return model;
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }
        return null;
    }

    private void resetModelList() {
        modelTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("n/a")));
        modelTree.setEnabled(false);
    }

    private void updateModelList(ModelDirectory directory) throws Exception {
        if (directory != null) {
            DefaultMutableTreeNode top = createTreeNodes(directory);
            DefaultTreeModel treeModel = new DefaultTreeModel(top);

            modelTree.addTreeSelectionListener(new TreeSelectionListener() {

                @Override
                public void valueChanged(TreeSelectionEvent e) {
                    // Get selected item
                    Object o = modelTree.getLastSelectedPathComponent();
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) o;
                    System.out.println(node);
                    o = node.getUserObject();
                    previewLabel.setIcon(null);
                    previewLabel.repaint();
                    if (o instanceof ModelDescription) {
                        ModelDescription descr = (ModelDescription) o;
                        updateVersions(descr);
                    }
                }
            });

            modelTree.setModel(treeModel);
            modelTree.setEnabled(true);
        } else {
            resetModelList();
        }
    }

    private void resetVersions() {
        previewLabel.setText("n/a");
        String[] defaultData = {"n/a"};
        versionsComboBox.setModel(new DefaultComboBoxModel(defaultData));
        versionsComboBox.setEnabled(false);
        currentModelVersion = null;
        commentTextArea.setText("");
    }

    private void updateVersionsComboBox() {
        Object o = versionsComboBox.getSelectedItem();
        if (o instanceof ModelVersionDescription) {
            ModelVersionDescription descr = (ModelVersionDescription) o;
            try {
                previewLabel.setBackground(Color.WHITE);
                previewLabel.setText("");
                previewLabel.setIcon(descr.getPreview());
                currentModelVersion = descr;
                commentTextArea.setText(descr.getComment());
            } catch (Exception ex) {
                System.err.println(ex.getMessage());
                resetVersions();
            }
        }
    }

    private void updateVersions(ModelDescription descr) {

        try {
            // Fetch versions
            List<ModelVersionDescription> versions = descr.getModelVersionDescriptions();
            DefaultComboBoxModel verModel = new DefaultComboBoxModel(versions.toArray());
            versionsComboBox.setModel(verModel);
            if (!isOnlyHeadVersions()) versionsComboBox.setEnabled(true);
            versionsComboBox.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    updateVersionsComboBox();
                }
            });
            verModel.setSelectedItem(versions.get(0));
            updateVersionsComboBox();
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
            resetVersions();
        }

    }

    private DefaultMutableTreeNode createTreeNodes(ModelDirectory directory) throws Exception {
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(directory.getDescription());

        for (ModelDirectoryEntry e : directory.getEntries()) {
            if (e instanceof ModelDirectory) {
                ModelDirectory currDir = (ModelDirectory) e;
                // Folder found, call recursive
                DefaultMutableTreeNode child = createTreeNodes(currDir);
                top.add(child);
            }
            if (e instanceof ModelDescription) {
                ModelDescription currDescr = (ModelDescription) e;
                // Node found
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(currDescr);
                top.add(child);
            }
        }

        return top;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                WorkbenchFetchModelDialog dialog = new WorkbenchFetchModelDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea commentTextArea;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton fetchButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTree modelTree;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JTextField serverUriTextField;
    private javax.swing.JTextField userName;
    private javax.swing.JPasswordField userPassword;
    private javax.swing.JComboBox versionsComboBox;
    // End of variables declaration//GEN-END:variables
}
