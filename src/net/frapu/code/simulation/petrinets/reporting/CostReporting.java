/**
 *
 * Process Editor - Simulation Reporting Package
 *
 * (C) 2008,2009 Frank Puhlmann
 *
 * http://frapu.net
 *
 */
package net.frapu.code.simulation.petrinets.reporting;

import java.awt.Color;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;
import net.frapu.code.simulation.petrinets.LaneReport;
import net.frapu.code.simulation.petrinets.PetriNetSimulation;
import net.frapu.code.simulation.petrinets.PetriNetSimulationListener;
import net.frapu.code.visualization.ProcessEditor;
import net.frapu.code.visualization.ProcessNode;
import net.frapu.code.visualization.reporting.BarChart;
import net.frapu.code.visualization.reporting.ReportingModel;

/**
 *
 * @author fpu
 */
public class CostReporting extends javax.swing.JPanel implements PetriNetSimulationListener {

	private static final long serialVersionUID = -2239671299999996066L;
	private ProcessEditor editor;
    private ReportingModel model;
    private PetriNetSimulation sim;
    private BarChart chart1;
    private Set<ProcessNode> lanes = new HashSet<ProcessNode>();

    /** Creates new form CostReporting */
    public CostReporting(PetriNetSimulation sim) {
        // Initialize components
        initComponents();
        initCustomComponents();
        // Register listener
        this.sim = sim;
        sim.addListener(this);
    }

    public void initCustomComponents() {
        // Initialize model
        model = new ReportingModel("Costs");

        chart1 = new BarChart();
        chart1.setSize(400, 300);
        chart1.setPos(230, 180);
        chart1.setProperty(BarChart.PROP_BARCOLOR, ""+(new Color(64,64,192).getRGB()));

        chart1.setText("Costs per Instance");
        chart1.setProperty(BarChart.PROP_LABELS, "Agv,Min,Max");
        chart1.setXLabel("Type");
        chart1.setYLabel("Euro");
        chart1.setProperty(BarChart.PROP_VALUES, "");

        model.addNode(chart1);

        // Create editor and add to ViewportView
        editor = new ProcessEditor(model);
        jScrollPane1.setViewportView(editor);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void refreshDisplay() {
        // ignore
    }

    public void simulationFinished() {
        // Update values here
        LinkedList<Integer> data = new LinkedList<Integer>();
        try {
            data.add((int) Double.parseDouble(sim.getSimulationResult(PetriNetSimulation.SIM_COST_AVG)));
            data.add((int) Double.parseDouble(sim.getSimulationResult(PetriNetSimulation.SIM_COST_MIN)));
            data.add((int) Double.parseDouble(sim.getSimulationResult(PetriNetSimulation.SIM_COST_MAX)));
        } catch (Exception e) {
            chart1.setErrorMessage("Error retrieving results");
        }
        chart1.setData(data);

        // Create new Lane reports
        final int SPACING = 20;
        int yPos = chart1.getPos().y + chart1.getSize().height + SPACING;
        for (LaneReport r : sim.getLaneReports()) {
            // Create chart
            BarChart chart = new BarChart();
            chart.setSize(400, 300);
            chart.setPos(230, yPos);
            chart.setText("Costs for Lane " + r.getLaneName());
            chart.setProperty(BarChart.PROP_LABELS, "Agv,Min,Max");
            chart.setXLabel("Type");
            chart.setYLabel("Euro");
            chart.setProperty(BarChart.PROP_BARCOLOR, ""+(new Color(128,128,192).getRGB()));
            // Update values
            data.clear();
            try {
                data.add((int) Double.parseDouble(r.getLaneResult(LaneReport.LANE_COST_AVG)));
                data.add((int) Double.parseDouble(r.getLaneResult(LaneReport.LANE_COST_MIN)));
                data.add((int) Double.parseDouble(r.getLaneResult(LaneReport.LANE_COST_MAX)));
            } catch (Exception e) {
                chart.setErrorMessage("Error retrieving results");
            }
            chart.setData(data);

            // Add chart to model
            model.addNode(chart);
            // Add chart to lanes
            lanes.add(chart);
            // Increase Y-Counter
            yPos += chart.getSize().height + SPACING;
        }

        editor.setSize(editor.getSize().width, editor.getSize().height+SPACING);

        repaint();
    }

    public void simulationStarted() {
        // Reset values
        chart1.setData(null);

        // Remove all Lane reports
        for (ProcessNode n : lanes) {
            model.removeNode(n);
        }
        lanes.clear();

        repaint();
    }
}
